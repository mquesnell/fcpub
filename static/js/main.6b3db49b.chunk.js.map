{"version":3,"sources":["dates.js","GetData.js","Geoloc.js","GCLinks.js","SunTimes.js","Server.js","DayDetail.jsx","Days.js","Palettes/GreenPalette.js","Palettes/TealPalette.js","Palettes/DarkPalette.js","Palettes/GrayPalette.js","Palettes/BluePalette.js","GenerateTheme.js","Themes.js","FindCountHeader.jsx","HeaderDay.jsx","Header.jsx","DayCell.jsx","Holidays.js","Week.jsx","ComposeWeeks.js","SummaryCard.jsx","Grid7.jsx","FindGrid.jsx","NextWeek.jsx","useCustomTheme.js","Version.js","App.js","index.js"],"names":["DateTime","require","getDates","startDate","number","counts","result","status","dates","goal","num","parseInt","isNaN","len","length","indices","today","local","day","year","date","monthString","substring","parsed","getMonthFromDate","getDayOfMonth","i","d","toFormat","dateIndex","push","plus","days","getNDayIndices","dayNames","names","Date","getFullYear","toString","startDoW","getDay","index","getDayNames","dayname","getNDays","month","getMonth","getDate","padStart","getFormattedDate","getReqFindsNextWeek","findCount","dayString","getShortMonthName","getMonthName","short","monthNames","long","getLongDateText","getDateIndex","getTotalFinds","getLabFinds","labs","getNormalFinds","getGoal","getNumToFind","f","getFormattedGeoLoc","pos","lat","latitude","convertToDegMinutes","lon","longitude","dd","deg","min","Math","abs","toFixed","getGCSearchURL","loc","origin","replace","getGCBrowseMapURL","ll","geo","getLocaleTime","t","toLocaleTimeString","getURL","endpoint","DayDetail","props","offset","onClose","selectedValue","open","cell","position","allData","useState","isLoaded","setIsLoaded","weather","setWeather","sunTimesLoaded","setSunTimesLoaded","results","sunrise","sunset","sunTimes","setSunTimes","qDT","dayFindData","numToFind","totalFinds","normalFinds","labFinds","getDayFindData","useEffect","location","sunLoc","wxURL","axios","get","then","response","data","sunURL","classes","makeStyles","theme","root","content","minWidth","backgroundColor","palette","normBkgnd","padding","closeButton","right","spacing","top","color","paper","spacer","height","apilink","display","justifyContent","finds","paddingLeft","find","someReq","noneReq","numtofind","gclinksdiv","gclink","altBkgnd","weatherFact","sun","alignItems","suntime","holiday","border","useStyles","handleClose","getCurrentWeather","currentTemp","current","temp_f","feelslike_f","currentIcon","condition","icon","currentWind","wind_mph","gust_mph","className","Typography","name","text","src","alt","isForecastAvailable","forecast","forecastday","getForecastWeather","temps","maxtemp_f","mintemp_f","hour","getHours","forecastHour","precipChance","daily_chance_of_rain","snowChance","daily_chance_of_snow","maxWind","maxwind_mph","uv","getSunTimes","astro","st","fontSize","getSunAPILink","linkHref","linkText","Link","href","target","rel","variant","underline","Dialog","DialogTitle","id","df","IconButton","onClick","Paper","elevation","holidayName","getGeolocItems","DayChoices","useDays","defaultDays","setInternalDays","window","localStorage","getItem","setItem","setDaysAndStore","GreenPalette","primary","light","main","dark","headerText","background","default","Green","Red","Orange","Gray","Yellow","altNumber","summary","type","TealPalette","DarkPalette","GrayPalette","altNoneReq","altSomeReq","BluePalette","generateTheme","newPalette","createMuiTheme","Themes","Blue","Teal","Dark","ThemeArray","Object","keys","map","key","withTheme","small","useMediaQuery","breakpoints","down","titleText","flex","formControl","paddingRight","selectText","nextText","barText","weekIcon","cursor","AppBar","Toolbar","handleWeek","FormControl","Select","disableUnderline","labelId","value","onChange","changeDays","MenuItem","changeTheme","th","dayRoot","textAlign","HeaderDay","headerRoot","flexWrap","borderStyle","borderWidth","borderColor","paddingTop","paddingBottom","Header","values","Grid","item","container","xs","getHeaderCell","subtext","monthFlag","normalBkgnd","normalNumClr","someReqNormClr","noneReqNormClr","colors","unused","numberColor","findColor","ok","low","cellRoot","flexDirection","up","cellNumber","cellText","cellSubText","checkPad","sm","md","isHoliday","holidays","buildFullDate","err","console","log","message","Week","dayOnClick","weekRoot","commonBorder","getDayCell","rawDate","styleName","getHolidayName","random","getWeeks","weeks","slice","convertDaysToWeeks","currentDoW","currentDoM","createUnusedDay","j","createDayObject","numToPad","k","first","getDays","dom","borderRadius","box","zeroReq","moreThanZero","summaryFigs","SummaryCard","info","generated","next7days","Card","CardContent","Box","g7root","flexGrow","Grid7","weekNum","week","FindGrid","direction","gridRoot","weekGrid","dayCell","dayText","findText","findZero","dayPaper","getDayHeader","width","dayName","dayNum","findStyles","noWrap","getSummaryInfo","useCustomTheme","defaultTheme","setInternalTheme","componentMounted","setComponentMounted","localThemeName","customTheme","version","App","setTheme","setDays","setOpen","setSelectedValue","toDoOpen","setToDoOpen","toDoWeek","setToDoWeek","clickedDate","setClickedDate","setPosition","setAllData","dataLoaded","setDataLoaded","setHolidays","serverVersion","setServerVersion","pq_time","update_time","config","setConfig","navigator","geolocation","getCurrentPosition","coords","res","fcd","creationTime","toLocaleString","getFindCountData","CssBaseline","event","dayOfWeek","weekday","minus","getCurrentWeek","align","style","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b3db49b.chunk.js","sourcesContent":["/** @format */\n\nconst { DateTime } = require(\"luxon\");\n\n//\n// Various date support functions\n//\n\n// creates a date string in the format MM-DD\n// does not error check the input\nexport function buildDate(month, day) {\n  const date =\n    month.toString().padStart(2, \"0\") + \"-\" + day.toString().padStart(2, \"0\");\n  return date;\n}\n\n// returns a string containing the given date in the format MM-DD\nexport function getFormattedDate(date) {\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  return buildDate(month, day);\n}\n\n// returns todays date in the format MM-DD\nexport function getToday() {\n  const today = new Date();\n  return getFormattedDate(today);\n}\n\n// returns the current hour as an integer: 0-23\nexport function getCurrentHour() {\n  const now = new Date();\n  return now.getHours();\n}\n\n// Returns the given number of days, beginning with the given start date. If startDate\n// or number is not valid, an empty array is returned.  The maximum number of dates\n// returned is the complete array (366)\nexport function getDates(startDate, number, counts) {\n  let result = {\n    startDate: startDate,\n    number: number,\n    status: \"fail\",\n    dates: [],\n    goal: 0,\n  };\n\n  // parse the number, if not a number, return an error\n  let num = parseInt(number, 10);\n  if (isNaN(num)) {\n    return result;\n  }\n\n  // if the requested number of days is more than one year,\n  // set it to one year\n  const len = counts.dates.length;\n  if (num > len) {\n    num = len;\n    result.number = num;\n  }\n\n  const indices = getNDayIndices(startDate, result.number, counts);\n\n  if (indices.length < 1) {\n    return result;\n  }\n\n  const dayNames = getDayNames(startDate, result.number);\n\n  for (let i = 0; i < num; i++) {\n    const index = indices[i];\n    const d = counts.dates[index];\n    d.dayname = dayNames[i];\n    result.dates.push(d);\n  }\n\n  result.goal = counts.goal;\n  result.status = \"ok\";\n\n  return result;\n}\n\n// Convenience function that returns an array of the indices of the\n// given number of days, starting with today\n// Inputs:\n//   startDate: starting date in the format MM-dd\n//   num: number of days\n//   counts: the raw find data\n// Returns:\n//   array of date indices on success,\n//   empty array on failure\nexport function getNDayIndices(startDate, num, counts) {\n  let indices = [];\n\n  const today = DateTime.local();\n  let day = DateTime.local(\n    today.year,\n    getMonthFromDate(startDate),\n    getDayOfMonth(startDate)\n  );\n\n  for (let i = 0; i < num; i++) {\n    const d = day.toFormat(\"MM-dd\");\n\n    if (d in counts.dateIndex) {\n      indices.push(counts.dateIndex[d]);\n    } else {\n      return [];\n    }\n\n    day = day.plus({ days: 1 });\n  }\n\n  return indices;\n}\n\n// Convenience function that returns the next 14 days\nexport function get14Days(counts) {\n  return getNDays(14, counts);\n}\n\n// Convenience function that returns the next num days\nexport function getNDays(num, counts) {\n  return getDates(getToday(), num, counts);\n}\n\n// Returns an array of strings containing the names of the\n// next <number> days, beginning with the given start date\n// in the current year.\n// startDate: date in the form MM-DD\n// number: integer number of days\nexport function getDayNames(startDate, number) {\n  const names = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let result = [];\n\n  // get the starting day in this year\n  const year = new Date().getFullYear().toString();\n  const sd = new Date(startDate + \"-\" + year);\n  const startDoW = sd.getDay();\n\n  for (let i = 0; i < number; i++) {\n    let index = (startDoW + i) % names.length;\n    result.push(names[index]);\n  }\n\n  return result;\n}\n\n// returns the number of finds required in the next 7 days\n// dates: array of dates with findcounts, if length is less than 7,\n//        zero is returned.\n// goal: the desired minimum number of finds in the next 7 days,\n//       must be greater than zero\nexport function getReqFindsNextWeek(dates, goal) {\n  let result = 0;\n  let days = 0;\n\n  if (dates.length < 7 || goal < 1) {\n    return result;\n  }\n\n  for (let i = 0; i < 7; i++) {\n    if (dates[i].findCount < goal) {\n      result += goal - dates[i].findCount;\n      days++;\n    }\n  }\n\n  if (result !== 0) {\n    return `${result} -- (${days} day${days > 1 ? \"s\" : \"\"})`;\n  } else {\n    return result;\n  }\n}\n\n// Helper function that returns the day of the month as an integer.\n//\n// Input: string containing the date in the format MM-DD\n//\n// Output: integer day of the month for the given date\nexport function getDayOfMonth(date) {\n  // 01234\n  // MM-DD\n  const dayString = date.substring(3);\n  const parsed = parseInt(dayString, 10);\n\n  if (isNaN(parsed)) {\n    return 0;\n  }\n\n  return parsed;\n}\n\n// Helper function that returns the month as an integer.\n//\n// Input: string containing the date in the format MM-DD\n//\n// Output: month for the given date\nexport function getMonthFromDate(date) {\n  // 01234\n  // MM-DD\n  const monthString = date.substring(0, 2);\n  const parsed = parseInt(monthString, 10);\n\n  if (isNaN(parsed)) {\n    return 0;\n  }\n\n  return parsed;\n}\n// Helper function to return the month as a three-character string\n//\n// Input: string containing the date in the format MM-DD\n//\n// Output: 3-character string representing the month for the given date\nexport function getShortMonthName(date) {\n  return getMonthName(date, true);\n}\n\n// Helper function to get the name of the month represented by the date. The\n// returned name can be either a short 3-char string or the full name.\n//\n// Inputs: date, string in the format MM-DD\n//         short: boolean, true indicates short name, otherwise full\n//\n// Output: string containing the string representation of the month\nfunction getMonthName(date, short) {\n  // 01234\n  // MM-DD\n  const month = parseInt(date.substring(0, 2), 10);\n  const monthNames = [\n    { short: \"dummy\", long: \"dummy\" },\n    { short: \"Jan\", long: \"January\" },\n    { short: \"Feb\", long: \"February\" },\n    { short: \"Mar\", long: \"March\" },\n    { short: \"Apr\", long: \"April\" },\n    { short: \"May\", long: \"May\" },\n    { short: \"Jun\", long: \"June\" },\n    { short: \"Jul\", long: \"July\" },\n    { short: \"Aug\", long: \"August\" },\n    { short: \"Sep\", long: \"September\" },\n    { short: \"Oct\", long: \"October\" },\n    { short: \"Nov\", long: \"November\" },\n    { short: \"Dec\", long: \"December\" },\n  ];\n\n  if (isNaN(month) || month < 1 || month > 12) {\n    return \"\";\n  }\n\n  return short ? monthNames[month].short : monthNames[month].long;\n}\n\nexport function getLongDateText(date) {\n  if (date) {\n    return `${getDayOfMonth(date)} ${getMonthName(date)}`;\n  } else {\n    return \"\";\n  }\n}\n\n// returns an array of 7 days for the current week\n// input: the count data\nexport function getCurrentWeek(counts) {\n  // get the day of the week of today and use it\n  // to get the first day of the week\n  const today = DateTime.local();\n  const dayOfWeek = today.weekday; // note: Sunday = 7, Monday = 1, Tue = 2\n  const startOfWeek =\n    dayOfWeek === 7 ? today : today.minus({ days: dayOfWeek });\n  const date = startOfWeek.toFormat(\"MM-dd\");\n\n  return getDates(date, 7, counts);\n}\n\n// adds the offset to the current date and returns the result\n// in the format: YYYY-MM-DD\n//\n// input: the number of days in the future, 0 = today, 1= tomorrow, etc.\nexport function getFullDate(offset) {\n  const today = DateTime.local();\n  const newDay = today.plus({ days: offset });\n  return newDay.toFormat(\"yyyy-MM-dd\");\n}\n","/** @format */\n\n// utility functions for getting info out of the data\n\nimport * as df from \"./dates\";\n\n// convenience function to return find data for a given date\nexport function getDayFindData(date, counts) {\n  let result = {\n    numToFind: getNumToFind(date, counts),\n    totalFinds: getTotalFinds(date, counts),\n    normalFinds: getNormalFinds(date, counts),\n    labFinds: getLabFinds(date, counts),\n    goal: getGoal(counts),\n  };\n\n  return result;\n}\n\n// returns the find count data and summary for the given number of days\nexport function getFindCountData(days, counts) {\n  const data = df.getNDays(days, counts);\n\n  const summaryInfo = {\n    generated: new Date(counts.creationTime).toLocaleString(),\n    goal: counts.goal,\n    next7days: df.getReqFindsNextWeek(data.dates, counts.goal),\n  };\n\n  return {\n    data: data,\n    summary: summaryInfo,\n  };\n}\n\n// returns the value from dateIndex corresponding to the given date\nfunction getDateIndex(date, counts) {\n  if (date in counts.dateIndex) {\n    return counts.dateIndex[date];\n  }\n\n  return \"\";\n}\n\n// returns the total number of finds for the given date\nexport function getTotalFinds(date, counts) {\n  const index = getDateIndex(date, counts);\n\n  if (index === \"\") {\n    return -1;\n  }\n\n  return counts.dates[index].findCount;\n}\n\n// returns the number of lab finds for the given date (if any)\nexport function getLabFinds(date, counts) {\n  const index = getDateIndex(date, counts);\n\n  if (index === \"\") {\n    return -1;\n  }\n\n  return counts.dates[index].labs ? counts.dates[index].labs : 0;\n}\n\n// returns the number of \"normal\" finds (everything except labs) for the\n// give date\nexport function getNormalFinds(date, counts) {\n  return getTotalFinds(date, counts) - getLabFinds(date, counts);\n}\n\n// returns the daily goal\nexport function getGoal(counts) {\n  return counts.goal;\n}\n\n// returns the number of find required for the given date.\n// if the current count exceeds the goal, zero is returned\nexport function getNumToFind(date, counts) {\n  const f = getGoal(counts) - getTotalFinds(date, counts);\n  return f < 0 ? \"0\" : f;\n}\n","/** @format */\n\n// helper methods for dealing with geo-locations\n\n// returns a nicely formatted geolocation in the format:\n// (N|S) DD MM.mmm (E|W) DDD MM.mmm\nexport function getFormattedGeoLoc(pos) {\n  return `${getFormattedLatitude(pos.latitude)}, ${getFormattedLongitude(\n    pos.longitude\n  )}`;\n}\n\nexport function getFormattedLatitude(lat) {\n  const dir = lat >= 0 ? \"N\" : \"S\";\n  return `${dir} ${convertToDegMinutes(lat)}`;\n}\n\nexport function getFormattedLongitude(lon) {\n  const dir = lon >= 0 ? \"E\" : \"W\";\n  return `${dir} ${convertToDegMinutes(lon)}`;\n}\n\n// converts decimal degrees to degrees and decimal minutes\n// returns a string in the format: [D][D]D MM.mmm (any - sign is removed)\nexport function convertToDegMinutes(dd) {\n  let deg = dd | 0; // truncate to get degrees without sign\n  const frac = Math.abs(dd - deg); // get fractional part\n  let min = frac * 60; // get the minutes\n\n  // check to see if the minutes round up to more than a whole degree\n  if (min >= 60.0) {\n    deg++;\n    min = min - 60.0;\n  }\n\n  return `${Math.abs(deg)}° ${min.toFixed(3)}`;\n}\n\n// converts a position object to a string suitable for use with the\n// geocaching.com browse map in the format YY.YYYYY,XXX.XXXXXX where\n// Y is the digits of latitude and X is the digits of longitude\nexport function convertToString(pos) {\n  return `${pos.latitude.toFixed(6)},${pos.longitude.toFixed(6)}`;\n}\n","/** @format */\n\n// geocaching.com link helper functions\n\nimport * as geo from \"./Geoloc\";\n\n// basic search URL\n// https://www.geocaching.com/play/search?origin=N+41%c2%b0+1.366,+W+111%c2%b0+56.419&nfb[0]=llenseuqm&f=2&o=2&utr=false\n\n// creates a URL for the geocaching.com search interface\nexport function getGCSearchURL(loc) {\n  const baseURL = \"https://www.geocaching.com/play/search\";\n  const userParam = \"nfb[0]=llenseuqm\";\n  const foundByUser = \"f=2\";\n  const ownedByUser = \"o=2\";\n  const utr = \"utr=false\";\n\n  // create the origin parameter by replacing spaces with +\n  const origin = \"origin=\" + loc.replace(/\\s/g, \"+\");\n\n  // build the URL and return\n  return `${baseURL}?${origin}&${userParam}&${foundByUser}&${ownedByUser}&${utr}`;\n}\n\n// browse map URL\n// https://www.geocaching.com/map/#?ll=41.022767,-111.940317&z=14\n// input: position object having latitude and longitude fields\nexport function getGCBrowseMapURL(pos) {\n  const baseURL = \"https://www.geocaching.com/map/#\";\n  const ll = `ll=${geo.convertToString(pos)}`;\n  const zoom = \"z=14\";\n\n  return `${baseURL}?${ll}&${zoom}`;\n}\n","/** @format */\n\n// functions for manipulating and formatting the sunrise, sunset times\n\nexport function getLocalSunriseTime(sun) {\n  if (sun.status !== \"OK\") {\n    return \"UNKNOWN\";\n  }\n\n  return getLocaleTime(sun.results.sunrise);\n}\n\nexport function getLocalSunsetTime(sun) {\n  if (sun.status !== \"OK\") {\n    return \"UNKNOWN\";\n  }\n\n  return getLocaleTime(sun.results.sunset);\n}\n\nfunction getLocaleTime(t) {\n  const d = new Date(t);\n  return d.toLocaleTimeString();\n}\n\nexport function getAPIurl() {\n  return \"https://sunrise-sunset.org/api\";\n}\n","/** @format */\n\n// various convenience functions for dealing with the server\n\n// returns the api key used to contact the server\nconst getKey = () => {\n  return \"mEuqAh6oKH\";\n};\n\n// returns the server address without / on the end\nconst getServerAddr = () => {\n  return \"https://young-stream-78694.herokuapp.com\";\n};\n\n// returns a complete endpoint URL with the key attached as\n// the first parameter:\n// example: https://..../api/endpoint?key=....\n//\nconst getURL = (endpoint) => {\n  return `${getServerAddr()}/api/${endpoint}?key=${getKey()}`;\n};\n\n// returns the weather api address with the key attached as the first param\nexport const getWxURL = () => {\n  return getURL(\"weather\");\n};\n\n// returns the sunrise/sunset times api address with the key as the first param\nexport const getSunURL = () => {\n  return getURL(\"sun\");\n};\n\n// returns the holidays api address with the key as the first param\nexport const getHolidaysURL = () => {\n  return getURL(\"hday/all\");\n};\n\n// returns the find data api address with the key as the first param\nexport const getFindsURL = () => {\n  return getURL(\"all\");\n};\n\nexport const getServerVersionURL = () => {\n  return getURL(\"version\");\n};\n\nexport const getConfigURL = () => {\n  return getURL(\"config\");\n};\n","/** @format */\n\n// implements the details dialog\nimport React, { useState, useEffect } from \"react\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Link from \"@material-ui/core/Link\";\nimport Paper from \"@material-ui/core/Paper\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport Brightness2Icon from \"@material-ui/icons/Brightness2\";\nimport GpsFixedIcon from \"@material-ui/icons/GpsFixed\";\nimport axios from \"axios\";\n\nimport { getDayFindData } from \"./GetData\";\nimport { getFormattedGeoLoc } from \"./Geoloc\";\nimport { getGCBrowseMapURL, getGCSearchURL } from \"./GCLinks\";\nimport * as df from \"./dates\";\nimport * as st from \"./SunTimes\";\nimport { getWxURL, getSunURL } from \"./Server\";\n\nfunction DayDetail(props) {\n  const { onClose, selectedValue, open, cell, position, allData } = props;\n\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [weather, setWeather] = useState({});\n  const [sunTimesLoaded, setSunTimesLoaded] = useState(false);\n  const [sunTimes, setSunTimes] = useState({\n    results: {\n      sunrise: \"\",\n      sunset: \"\",\n    },\n    status: \"fail\",\n  });\n\n  const date = cell.day;\n\n  const qDT = df.getFullDate(cell.offset);\n\n  const dayFindData = getDayFindData(date, allData);\n\n  // const location = \"q=41.02,-111.94\"; // Kaysville\n\n  useEffect(() => {\n    const location = `loc=${position.latitude},${position.longitude}`;\n    const sunLoc = `lat=${position.latitude}&lon=${position.longitude}`;\n    // getWxURL: https://..../api/weather?key=...\n    const wxURL = `${getWxURL()}&${location}&dt=${qDT}`;\n\n    axios.get(wxURL).then((response) => {\n      setWeather(response.data);\n      setIsLoaded(true);\n    });\n\n    // get the sunrise/sunset times\n    const sunURL = `${getSunURL()}&${sunLoc}&date=${qDT}`;\n\n    axios.get(sunURL).then((response) => {\n      // console.log(\"sun times:\");\n      // console.log(response.data);\n      setSunTimes(response.data);\n      setSunTimesLoaded(true);\n    });\n  }, [qDT, position.latitude, position.longitude]);\n\n  const useStyles = makeStyles((theme) => ({\n    root: {},\n    content: {\n      minWidth: \"300px\",\n      backgroundColor: theme.palette.day.normBkgnd,\n      padding: \"10px\",\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.day.number,\n      padding: \"5px\",\n    },\n    paper: {\n      padding: \"10px\",\n    },\n    spacer: {\n      height: \"10px\",\n    },\n    apilink: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n    },\n    finds: {\n      paddingLeft: \"10px\",\n      color:\n        dayFindData.numToFind > 0\n          ? theme.palette.find.someReq\n          : theme.palette.find.noneReq,\n    },\n    numtofind: {\n      display: \"flex\",\n    },\n    gclinksdiv: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n    },\n    gclink: {\n      color: theme.palette.day.altBkgnd,\n      paddingLeft: \"20px\",\n    },\n    weatherFact: {\n      paddingLeft: \"15px\",\n    },\n    sun: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    suntime: {\n      paddingLeft: \"10px\",\n    },\n    holiday: {\n      color: theme.palette.holiday.border,\n    },\n  }));\n\n  const classes = useStyles();\n\n  const handleClose = () => {\n    onClose(selectedValue);\n  };\n\n  const getCurrentWeather = () => {\n    // if the selected day is not today, then the current weather is not displayed\n    if (!cell.today) {\n      return <></>;\n    } else {\n      const currentTemp = `${weather.current.temp_f.toFixed(\n        0\n      )}, feels like: ${weather.current.feelslike_f.toFixed(0)} °F`;\n      const currentIcon = `https:${weather.current.condition.icon}`;\n      const currentWind = `${weather.current.wind_mph.toFixed(\n        0\n      )}, gust: ${weather.current.gust_mph.toFixed(0)} MPH`;\n      return (\n        <>\n          <div className={classes.spacer}></div>\n          <Typography>Current weather in {weather.location.name}:</Typography>\n          <Typography className={classes.weatherFact}>\n            Temp: {currentTemp}\n          </Typography>\n          <Typography className={classes.weatherFact}>\n            Wind: {currentWind}\n          </Typography>\n          <Typography className={classes.weatherFact}>\n            {weather.current.condition.text}\n          </Typography>\n          <div className={classes.weatherFact}>\n            <img src={currentIcon} alt=\"weather\"></img>\n          </div>\n        </>\n      );\n    }\n  };\n\n  // returns true if the weather object contains a forecast\n  const isForecastAvailable = () => {\n    try {\n      if (weather.forecast.forecastday.length > 0) {\n        return true;\n      }\n    } catch {\n      // ignore the error\n    }\n\n    return false;\n  };\n\n  const getForecastWeather = () => {\n    // if there is no forecast available (API docs say 10 days in the future\n    // but it seems to work for something like 16)\n    if (!isForecastAvailable()) {\n      return <></>;\n    }\n\n    const forecast = weather.forecast.forecastday[0];\n    const temps = `High/Low: ${forecast.day.maxtemp_f.toFixed(\n      0\n    )}/${forecast.day.mintemp_f.toFixed(0)} °F`;\n\n    // get the current hour and use it to get the forecast for the next hour\n    // this will seem more representative of the coming weather\n    let hour = df.getCurrentHour();\n\n    if (hour < 23) {\n      hour++;\n    }\n\n    const forecastHour = weather.forecast.forecastday[0].hour[hour];\n\n    const condition = `${forecastHour.condition.text}`;\n    const icon = `https:${forecastHour.condition.icon}`;\n    const precipChance = `Chance Precip: ${forecast.day.daily_chance_of_rain}%`;\n    const snowChance = `Chance Snow: ${forecast.day.daily_chance_of_snow}%`;\n    const maxWind = `Max. Wind: ${forecast.day.maxwind_mph.toFixed(0)} MPH`;\n    const uv = `UV Index: ${forecast.day.uv}`;\n\n    return (\n      <>\n        <Typography>Forecast:</Typography>\n        <Typography className={classes.weatherFact}>{temps}</Typography>\n        <Typography className={classes.weatherFact}>{maxWind}</Typography>\n        <Typography className={classes.weatherFact}>{precipChance}</Typography>\n        <Typography className={classes.weatherFact}>{snowChance}</Typography>\n        <Typography className={classes.weatherFact}>{uv}</Typography>\n        <Typography className={classes.weatherFact}>{condition}</Typography>\n        <div className={classes.weatherFact}>\n          <img src={icon} alt=\"weather\"></img>\n        </div>\n      </>\n    );\n  };\n\n  const getSunTimes = () => {\n    let sunrise = \"\";\n    let sunset = \"\";\n\n    // if the weather forecast is available, use the info from it, otherwise\n    // use the free api\n    if (isForecastAvailable()) {\n      sunrise = weather.forecast.forecastday[0].astro.sunrise;\n      sunset = weather.forecast.forecastday[0].astro.sunset;\n    } else {\n      if (sunTimesLoaded) {\n        sunrise = st.getLocalSunriseTime(sunTimes);\n        sunset = st.getLocalSunsetTime(sunTimes);\n      } else {\n        sunrise = \"N/A\";\n        sunset = \"N/A\";\n      }\n    }\n    return (\n      <>\n        <div className={classes.sun}>\n          <WbSunnyIcon fontSize=\"small\" />\n          <Typography\n            className={classes.suntime}>{`Sunrise: ${sunrise}`}</Typography>\n        </div>\n        <div className={classes.sun}>\n          <Brightness2Icon fontSize=\"small\" />\n          <Typography\n            className={classes.suntime}>{`Sunset: ${sunset}`}</Typography>\n        </div>\n      </>\n    );\n  };\n\n  const getSunAPILink = () => {\n    // configure the link depending on which API is used\n\n    let linkHref = \"\";\n    let linkText = \"\";\n\n    if (isForecastAvailable()) {\n      linkHref = \"https://www.weatherapi.com/\";\n      linkText = \"WeatherAPI.com\";\n    } else {\n      linkHref = st.getAPIurl();\n      linkText = \"Sunrise/Sunset API\";\n    }\n\n    return (\n      <>\n        <div className={classes.spacer}></div>\n        <div className={classes.spacer}></div>\n        <Link\n          className={classes.apilink}\n          href={linkHref}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          color=\"textSecondary\"\n          variant=\"body2\"\n          underline=\"always\">\n          {linkText}\n        </Link>\n      </>\n    );\n  };\n\n  const getWeatherInfo = () => {\n    // if there is no weather info at all:\n    if (!weather) {\n      return (\n        <>\n          <Typography>Weather Not Available</Typography>\n        </>\n      );\n    }\n\n    return (\n      <>\n        {getCurrentWeather()}\n        {getForecastWeather()}\n      </>\n    );\n  };\n\n  const getGeolocItems = () => {\n    // if the position is not available, don't render anything\n    // that needs it\n    if (position.status === \"ok\") {\n      const loc = getFormattedGeoLoc(position);\n      return (\n        <>\n          <div className={classes.spacer}></div>\n          <div className={classes.sun}>\n            <GpsFixedIcon fontSize=\"small\" />\n            <Typography className={classes.suntime}>\n              Location: {`${loc}`}\n            </Typography>\n          </div>\n          <div className={classes.gclinksdiv}>\n            <Link\n              className={classes.gclink}\n              href={`${getGCSearchURL(loc)}`}\n              target=\"_blank\"\n              rel=\"nonreferrer\"\n              underline=\"always\">\n              Search\n            </Link>\n            <Link\n              className={classes.gclink}\n              href={getGCBrowseMapURL(position)}\n              underline=\"always\"\n              target=\"_blank\"\n              rel=\"nonreferrer\">\n              GC Map\n            </Link>\n          </div>\n          <div className={classes.spacer}></div>\n          {getSunTimes()}\n          <div className={classes.spacer}></div>\n          {getWeatherInfo()}\n          {getSunAPILink()}\n        </>\n      );\n    } else {\n      return (\n        <>\n          <Typography>Location: unavailable</Typography>\n        </>\n      );\n    }\n  };\n\n  const getHoliday = () => {\n    if (!cell.holiday) {\n      return \"\";\n    }\n\n    return (\n      <>\n        <div className={classes.spacer}></div>\n        <Typography\n          className={classes.holiday}>{`${cell.holidayName}`}</Typography>\n      </>\n    );\n  };\n\n  if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <>\n        <Dialog onClose={handleClose} open={open} className={classes.root}>\n          <div className={classes.content}>\n            <DialogTitle id=\"daydetailtitle\">\n              {`${df.getLongDateText(date)}`}\n              <IconButton className={classes.closeButton} onClick={handleClose}>\n                <CloseIcon />\n              </IconButton>\n            </DialogTitle>\n            <Paper elevation={3} className={classes.paper}>\n              <Typography>\n                Total finds: {`${dayFindData.totalFinds}`}\n              </Typography>\n              <Typography>\n                Normal finds: {`${dayFindData.normalFinds}`}\n              </Typography>\n              <Typography>Lab finds: {`${dayFindData.labFinds}`}</Typography>\n              <Typography>Goal: {`${dayFindData.goal}`}</Typography>\n              <div className={classes.numtofind}>\n                <Typography>Number to find: </Typography>\n                <Typography\n                  className={\n                    classes.finds\n                  }>{`${dayFindData.numToFind}`}</Typography>\n              </div>\n              {getHoliday()}\n              {getGeolocItems()}\n            </Paper>\n          </div>\n        </Dialog>\n      </>\n    );\n  }\n}\n\nexport default DayDetail;\n","/** @format */\n\nimport { useEffect, useState } from \"react\";\n\n// list of the number of days that can be used to fill the grid\nexport const DayChoices = [\n  7,\n  14, // default\n  21,\n  30,\n];\n\n// implements a hook to set the days to be displayed and indicate when it\n// is loaded at startup.\n//\n// Based on code from:\n// https://css-tricks.com/a-dark-mode-toggle-with-react-and-themeprovider/\n\nexport const useDays = (defaultDays) => {\n  const [days, setInternalDays] = useState(defaultDays);\n\n  const setDaysAndStore = (d) => {\n    window.localStorage.setItem(\"days\", d);\n    setInternalDays(d);\n  };\n\n  const setDays = (d) => {\n    setDaysAndStore(d);\n  };\n\n  useEffect(() => {\n    const d = window.localStorage.getItem(\"days\");\n\n    if (d) {\n      setInternalDays(d);\n    }\n  }, []);\n\n  return [days, setDays];\n};\n","/** @format */\n\n// contains the green palette values\nimport Green from \"@material-ui/core/colors/green\";\nimport Red from \"@material-ui/core/colors/red\";\nimport Yellow from \"@material-ui/core/colors/yellow\";\nimport Gray from \"@material-ui/core/colors/grey\";\nimport Orange from \"@material-ui/core/colors/orange\";\n\nconst GreenPalette = {\n  name: \"Green\",\n  primary: {\n    light: \"#6abf69\",\n    main: \"#388e3c\",\n    dark: \"#00600f\",\n    headerText: \"#fff\",\n  },\n  background: {\n    default: Green[100],\n  },\n  find: {\n    noneReq: Green[400],\n    someReq: Red[500],\n  },\n  today: {\n    border: Green[700],\n    background: Orange[200],\n    number: Gray[500],\n  },\n  holiday: {\n    border: \"#1a237e\",\n  },\n  day: {\n    normBkgnd: \"white\",\n    altBkgnd: Yellow[50],\n    number: Gray[500],\n    altNumber: Gray[500],\n  },\n  summary: {\n    text: \"rgba(0, 0, 0, 0.87)\",\n    background: \"#white\",\n  },\n  type: \"light\",\n};\n\nexport default GreenPalette;\n","/** @format */\n\n// contains the teal palette values\nimport Green from \"@material-ui/core/colors/green\";\nimport Red from \"@material-ui/core/colors/red\";\nimport Gray from \"@material-ui/core/colors/grey\";\n\nconst TealPalette = {\n  name: \"Teal\",\n  primary: {\n    light: \"#52c7b8\",\n    main: \"#009688\",\n    dark: \"#00675b\",\n    headerText: \"#fff\",\n  },\n  background: {\n    default: \"#b2dfdb\",\n  },\n  find: {\n    noneReq: Green[400],\n    someReq: Red[500],\n  },\n  today: {\n    border: \"#009688\",\n    background: \"white\",\n    number: Gray[500],\n  },\n  holiday: {\n    border: \"#f50057\",\n  },\n  day: {\n    normBkgnd: \"white\",\n    altBkgnd: \"#fce4ec\",\n    // altBkgnd: Yellow[50],\n    number: Gray[500],\n    altNumber: Gray[500],\n  },\n  summary: {\n    text: \"rgba(0, 0, 0, 0.87)\",\n    background: \"#white\",\n  },\n  type: \"light\",\n};\n\nexport default TealPalette;\n","/** @format */\n\n// contains the teal palette values\nimport Green from \"@material-ui/core/colors/green\";\nimport Gray from \"@material-ui/core/colors/grey\";\n\nconst DarkPalette = {\n  name: \"Dark\",\n  primary: {\n    light: \"#484848\",\n    main: \"#000a12\",\n    dark: \"#000000\",\n    headerText: \"#fff\",\n  },\n  background: {\n    default: \"#263238\",\n  },\n  find: {\n    noneReq: Green[400],\n    // someReq: \"#039be5\",\n    someReq: \"#fff59d\",\n  },\n  today: {\n    border: \"#eceff1\",\n    background: \"#819ca9\",\n    number: \"#eceff1\",\n  },\n  holiday: {\n    border: \"#00e676\",\n  },\n  day: {\n    normBkgnd: \"#4f5b62\",\n    altBkgnd: \"#718792\",\n    number: Gray[500],\n    altNumber: \"black\",\n  },\n  summary: {\n    text: \"#eceff1\",\n    background: \"#4f5b62\",\n  },\n  type: \"dark\",\n};\n\nexport default DarkPalette;\n","/** @format */\n\n// contains the green palette values\nimport Gray from \"@material-ui/core/colors/grey\";\nimport Orange from \"@material-ui/core/colors/orange\";\n\nconst GrayPalette = {\n  name: \"Gray\",\n  primary: {\n    light: \"#6abf69\",\n    main: \"#3c3c3c\",\n    dark: \"#00600f\",\n    headerText: \"#8a8a8a\",\n  },\n  background: {\n    default: \"#1e1e1e\",\n  },\n  find: {\n    noneReq: Gray[500],\n    someReq: \"#e65100\",\n    altNoneReq: Gray[300],\n    altSomeReq: \"#3c3c3c\",\n  },\n  today: {\n    border: Orange[400],\n    background: \"#5c5c5c\",\n    number: Gray[500],\n  },\n  holiday: {\n    border: \"#03a9f4\",\n  },\n  day: {\n    normBkgnd: \"#5c5c5c\",\n    altBkgnd: Orange[400],\n    number: Gray[500],\n    altNumber: Gray[900],\n  },\n  summary: {\n    text: \"#8a8a8a\",\n    background: \"#3c3c3c\",\n  },\n  type: \"dark\",\n};\n\nexport default GrayPalette;\n","/** @format */\n\n// contains the green palette values\nimport Gray from \"@material-ui/core/colors/grey\";\n\nconst BluePalette = {\n  name: \"Blue\",\n  primary: {\n    light: \"#6abf69\",\n    main: \"#3f51b5\",\n    dark: \"#00600f\",\n    headerText: \"#76ff03\",\n  },\n  background: {\n    default: \"#3e3e3e\",\n  },\n  find: {\n    noneReq: Gray[600],\n    someReq: \"#b0ff57\",\n    altNoneReq: Gray[500],\n    altSomeReq: \"#3c3c3c\",\n  },\n  holiday: {\n    border: \"#f50057\",\n  },\n  today: {\n    border: \"#b2ff59\",\n    background: \"#aab6fe\",\n    number: Gray[800],\n  },\n  day: {\n    normBkgnd: \"#aab6fe\",\n    altBkgnd: \"#b2ff59\",\n    number: Gray[800],\n    altNumber: Gray[900],\n  },\n  summary: {\n    text: \"#1a1a1a\",\n    background: \"#909090\",\n  },\n  type: \"dark\",\n};\n\nexport default BluePalette;\n","/** @format */\n\n// contains the code to generate the custom theme\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\n// creates a custom theme using the properties of the given palette\nexport function generateTheme(newPalette) {\n  const theme = createMuiTheme({\n    palette: { ...newPalette },\n  });\n\n  return theme;\n}\n","/** @format */\n\n// convenience file for palette access\n\nimport GreenPalette from \"./Palettes/GreenPalette\";\nimport TealPalette from \"./Palettes/TealPalette\";\nimport DarkPalette from \"./Palettes/DarkPalette\";\nimport GrayPalette from \"./Palettes/GrayPalette\";\nimport BluePalette from \"./Palettes/BluePalette\";\n\nimport { generateTheme } from \"./GenerateTheme\";\n\n// all available themes\nexport const Themes = {\n  Blue: generateTheme(BluePalette),\n  Green: generateTheme(GreenPalette),\n  Teal: generateTheme(TealPalette),\n  Dark: generateTheme(DarkPalette),\n  Gray: generateTheme(GrayPalette),\n};\n\n// the array of theme names\nexport const ThemeNames = Object.keys(Themes).map(\n  (key) => Themes[key].palette.name\n);\n\n// themes as an array\nexport const ThemeArray = Object.keys(Themes).map((key) => Themes[key]);\n\nexport default Themes;\n","/** @format */\n\nimport React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles, withTheme } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { ThemeArray } from \"./Themes\";\nimport PaletteIcon from \"@material-ui/icons/Palette\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport { DayChoices } from \"./Days\";\nimport ViewWeekRoundedIcon from \"@material-ui/icons/ViewWeekRounded\";\n\nconst FindCountHeader = (props) => {\n  const small = useMediaQuery(props.theme.breakpoints.down(\"sm\"));\n  const titleText = small ? \"Finds\" : \"Cache Find Counts\";\n\n  const useStyles = makeStyles(() => ({\n    text: {\n      flex: 1,\n      color: props.theme.palette.primary.headerText,\n    },\n    spacer: {\n      height: \"10px\",\n    },\n    formControl: {\n      paddingRight: \"10px\",\n      paddingLeft: \"5px\",\n    },\n    selectText: {\n      color: props.theme.palette.primary.headerText,\n    },\n    nextText: {\n      color: props.theme.palette.primary.headerText,\n\n      paddingLeft: \"7px\",\n      paddingRight: \"7px\",\n    },\n    barText: {\n      color: props.theme.palette.primary.headerText,\n\n      paddingLeft: \"5px\",\n      paddingRight: \"15px\",\n    },\n    icon: {\n      color: props.theme.palette.primary.headerText,\n    },\n    weekIcon: {\n      paddingRight: \"10px\",\n      cursor: \"pointer\",\n    },\n  }));\n  const classes = useStyles();\n\n  const nextText = () => {\n    if (small) {\n      return \"\";\n    }\n\n    return <Typography className={classes.nextText}>Next:</Typography>;\n  };\n\n  return (\n    <>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <Typography className={classes.text}>{titleText}</Typography>\n          <ViewWeekRoundedIcon\n            className={`${classes.icon} ${classes.weekIcon}`}\n            onClick={() => {\n              props.handleWeek();\n            }}\n          />\n          <Typography className={classes.barText}>|</Typography>\n\n          <DateRangeIcon className={classes.icon} />\n          {nextText()}\n          <FormControl className={classes.formControl}>\n            <Select\n              disableUnderline\n              classes={{ icon: classes.selectText, root: classes.selectText }}\n              labelId=\"rangeLabel\"\n              id=\"rangeSelect\"\n              value={props.days}\n              onChange={props.changeDays}>\n              {DayChoices.map((d) => {\n                return (\n                  <MenuItem key={d} value={d}>\n                    {`${d} days`}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n          <Typography className={classes.barText}>|</Typography>\n          <PaletteIcon className={classes.icon} />\n          <FormControl className={classes.formControl}>\n            <Select\n              disableUnderline\n              classes={{ icon: classes.selectText, root: classes.selectText }}\n              labelId=\"themeLabel\"\n              id=\"themeSelect\"\n              value={props.theme}\n              onChange={props.changeTheme}>\n              {ThemeArray.map((th) => {\n                return (\n                  <MenuItem key={th.palette.name} value={th}>\n                    {th.palette.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </Toolbar>\n      </AppBar>\n      <div className={classes.spacer}></div>\n    </>\n  );\n};\n\nexport default withTheme(FindCountHeader);\n","/** @format */\n\n// Implements the individual cells in the header row\n\nimport React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  dayRoot: {\n    textAlign: \"center\",\n    color: theme.palette.primary.headerText,\n  },\n}));\n\n// expects a property named text containing a string to place in the cell\nconst HeaderDay = (props) => {\n  const classes = useStyles();\n  const { text } = props;\n\n  return (\n    <>\n      <Typography className={classes.dayRoot}>{text}</Typography>\n    </>\n  );\n};\n\nexport default HeaderDay;\n","/** @format */\n\n// implements the header of Grid7, consisting of 7 HeaderDay cells\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport HeaderDay from \"./HeaderDay\";\n\nconst useStyles = makeStyles((theme) => ({\n  headerRoot: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  cell: {\n    borderStyle: \"solid\",\n    borderWidth: \"2px\",\n    borderColor: theme.palette.background.default,\n    backgroundColor: theme.palette.primary.main,\n    paddingTop: \"10px\",\n    paddingBottom: \"10px\",\n  },\n}));\n\n// expects a property named values that is an array containing\n// seven day header values\nconst Header = (props) => {\n  const classes = useStyles();\n  const { values } = props;\n\n  const getHeaderCell = (value) => {\n    return (\n      <Grid item className={classes.cell} key={value} xs={12}>\n        <HeaderDay text={value} />\n      </Grid>\n    );\n  };\n\n  return (\n    <>\n      <Grid item container className={classes.headerRoot}>\n        {values.map((value) => getHeaderCell(value))}\n      </Grid>\n    </>\n  );\n};\n\nexport default Header;\n","/** @format */\n\n// implements the invidual days in a row\nimport React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles, withTheme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CheckIcon from \"@material-ui/icons/Check\";\n\n// expects the following properties:\n//   number: the number of the date\n//   text: the main text to be displayed\n//   subtext: smaller text to be displayed\n//   status: unused|ok|low\n//   today: boolean indicating whether this date is today\n//   monthFlag: boolean indicating whether this cell should be the\n//              primary month color or the alternative month color\nconst DayCell = (props) => {\n  const { number, text, subtext, status, today, monthFlag } = props.value;\n  const theme = props.theme;\n\n  let normalBkgnd = theme.palette.day.normBkgnd;\n  let normalNumClr = theme.palette.day.number;\n  let someReqNormClr = theme.palette.find.someReq;\n  let noneReqNormClr = theme.palette.find.noneReq;\n\n  if (monthFlag) {\n    normalBkgnd = theme.palette.day.altBkgnd;\n    normalNumClr = theme.palette.day.altNumber;\n\n    if (theme.palette.find.altNoneReq) {\n      noneReqNormClr = theme.palette.find.altNoneReq;\n    }\n\n    if (theme.palette.find.altSomeReq) {\n      someReqNormClr = theme.palette.find.altSomeReq;\n    }\n  }\n\n  const colors = {\n    unused: {\n      backgroundColor: theme.palette.background.default,\n      numberColor: theme.palette.background.default,\n      findColor: theme.palette.background.default,\n    },\n    ok: {\n      backgroundColor: normalBkgnd,\n      numberColor: normalNumClr,\n      findColor: noneReqNormClr,\n    },\n    low: {\n      backgroundColor: normalBkgnd,\n      numberColor: normalNumClr,\n      findColor: someReqNormClr,\n    },\n    today: {\n      backgroundColor: theme.palette.today.background,\n      numberColor: theme.palette.today.number,\n    },\n  };\n\n  let backgroundColor = colors.today.backgroundColor;\n  let numberColor = colors.today.numberColor;\n\n  if (!today) {\n    backgroundColor = colors[status].backgroundColor;\n    numberColor = colors[status].numberColor;\n  }\n\n  const useStyles = makeStyles((theme) => ({\n    cellRoot: {\n      display: \"flex\",\n      backgroundColor: backgroundColor,\n      height: \"100px\",\n      [theme.breakpoints.down(\"sm\")]: { flexDirection: \"column\" },\n      [theme.breakpoints.down(\"sm\")]: { justifyContent: \"space-between\" },\n      [theme.breakpoints.up(\"md\")]: { flexDirection: \"row\" },\n      cursor: \"pointer\",\n    },\n    cellNumber: {\n      color: numberColor,\n      paddingLeft: \"4px\",\n    },\n    cellText: {},\n    cellSubText: {},\n    finds: {\n      color: colors[status].findColor,\n      [theme.breakpoints.up(\"md\")]: { paddingTop: \"15px\" },\n      [theme.breakpoints.down(\"sm\")]: { paddingLeft: \"7px\" },\n      textAlign: \"center\",\n      justifyContent: \"center\",\n      alignContent: \"center\",\n    },\n    checkPad: {\n      [theme.breakpoints.up(\"md\")]: { paddingTop: \"10px\" },\n    },\n  }));\n\n  const classes = useStyles();\n\n  const getFindContent = () => {\n    if (status === \"ok\") {\n      return (\n        <>\n          <div className={classes.checkPad}></div>\n          <CheckIcon fontSize=\"large\" />\n        </>\n      );\n    } else {\n      return (\n        <>\n          <Typography variant=\"h4\" className={classes.cellText}>\n            {text}\n          </Typography>\n          <Typography variant=\"subtitle2\" className={classes.cellSubText}>\n            {subtext}\n          </Typography>\n        </>\n      );\n    }\n  };\n\n  return (\n    <>\n      <Grid item container className={classes.cellRoot}>\n        <Grid item sm={12} md={4}>\n          <Typography variant=\"subtitle1\" className={classes.cellNumber}>\n            {number}\n          </Typography>\n        </Grid>\n        <Grid item className={classes.finds} sm={12} md={8}>\n          {getFindContent()}\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default withTheme(DayCell);\n","/** @format */\n\n// holidays format\n// {\n//   \"count\": 19,\n//   \"status\": \"ok\",\n//   \"2021-01-01\": \"New Year's Day\",\n//   \"2021-01-18\": \"MLK Jr. Birthday\",\n//   \"2021-02-15\": \"Presidents' Day\",\n//   \"2021-02-25\": \"Day Off\",\n//   \"2021-03-08\": \"Spring Break\",\n//   \"2021-03-09\": \"Spring Break\",\n//   \"2021-03-10\": \"Spring Break\",\n//   \"2021-03-11\": \"Spring Break\",\n//   \"2021-03-12\": \"Spring Break\",\n//   \"2021-05-31\": \"Memorial Day\",\n//   \"2021-07-05\": \"Independence Day\",\n//   \"2021-07-23\": \"Pioneer Day\",\n//   \"2021-09-06\": \"Labor Day\",\n//   \"2021-10-11\": \"Columbus Day\",\n//   \"2021-11-11\": \"Veterans' Day\",\n//   \"2021-11-25\": \"Thanksgiving Day\",\n//   \"2021-12-24\": \"Christmas Day\",\n//   \"2021-12-31\": \"New Year's Day\",\n//   \"2022-01-17\": \"MLK Jr. Birthday\"\n// }\n\n// convenience methods for dealing with holidays\n\nexport const isHoliday = (date, year, holidays) => {\n  try {\n    if (holidays) {\n      return buildFullDate(year, date) in holidays;\n    }\n  } catch (err) {\n    console.log(\"Error in isHoliday():\");\n    console.log(err.message);\n  }\n  return false;\n};\n\nexport const getHolidayName = (date, year, holidays) => {\n  if (!isHoliday(date, year, holidays)) {\n    return \"\";\n  }\n\n  return holidays[buildFullDate(year, date)];\n};\n\n// convenience method to concatenate the year and date into\n// the format: YYYY-MM-DD\nconst buildFullDate = (year, date) => {\n  return `${year}-${date}`;\n};\n","/** @format */\n\n// implements a week of days (7)\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DayCell from \"./DayCell\";\nimport { isHoliday, getHolidayName } from \"./Holidays\";\n\n// expects a property named values that is an array containing\n// the values for each of the seven days:\n// values: [\n//    { number: '1', text: '12', subtext: 'Finds', status:'empty|used' },\n//    ...,\n// ]\nconst Week = (props) => {\n  const { values, dayOnClick, holidays } = props;\n\n  const useStyles = makeStyles((theme) => ({\n    weekRoot: {\n      display: \"flex\",\n      flexWrap: \"nowrap\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n    },\n    day: {\n      borderColor: theme.palette.background.default,\n    },\n    today: {\n      borderColor: theme.palette.today.border,\n    },\n    holiday: {\n      borderColor: theme.palette.holiday.border,\n    },\n    unused: {\n      borderColor: theme.palette.background.default,\n    },\n    commonBorder: {\n      borderStyle: \"solid\",\n      borderWidth: \"3px\",\n    },\n  }));\n\n  const classes = useStyles();\n\n  const getDayCell = (value) => {\n    const { status, today, rawDate, index, year } = value;\n    const cell = {\n      day: rawDate,\n      offset: index,\n      today: today,\n      year: year,\n      holiday: false,\n      holidayName: \"\",\n    };\n\n    let styleName = today ? classes.today : classes.day;\n\n    if (!today && isHoliday(rawDate, year, holidays)) {\n      styleName = classes.holiday;\n      cell.holiday = true;\n      cell.holidayName = getHolidayName(rawDate, year, holidays);\n    }\n\n    if (status === \"unused\") {\n      styleName = classes.unused;\n    }\n\n    return (\n      <Grid\n        item\n        className={`${classes.commonBorder} ${styleName}`}\n        key={Math.random()}\n        xs={12}\n        onClick={() => {\n          dayOnClick(cell);\n        }}>\n        <DayCell value={value} key={Math.random()} />\n      </Grid>\n    );\n  };\n\n  return (\n    <>\n      <Grid item container className={classes.weekRoot}>\n        {values.map((value) => getDayCell(value))}\n      </Grid>\n    </>\n  );\n};\n\nexport default Week;\n","/** @format */\n\nimport * as df from \"./dates\";\n\n// contains the code used to generate the week structures used for Grid7\n\n// Parses the dates in the data to an array of week objects\n//\n// Inputs: data { dates: [], goal: integer}\n//\n// Output: [week], where week is an array of 7 day objects\nexport function getWeeks(data) {\n  const days = getDays(data);\n  return convertDaysToWeeks(days);\n}\n\n// Parses the dates into an array of day objects for use by Grid7\n// inputs:\n//\n// { dates: [], goal: integer }\n//\n// outputs:\n//\n//   days: [\n//            {\n//              number: integer (day of the month),\n//              text: string to appear in large text (find count),\n//              subtext: string to appear under the large text (\"Finds\"),\n//              status: 'unused' | 'low' | 'ok',\n//              today: true | undefined\n//            },\n//            ...\n//         ]\n//\n// the number of days are padded front and back to be a multiple of 7\nfunction getDays(data) {\n  const { dates, goal } = data;\n\n  let days = [];\n\n  // get day of the week of the first day (today)\n  const today = new Date();\n  const currentDoW = today.getDay();\n  const currentDoM = today.getDate();\n\n  // pad the days array with unused days before the first day\n  for (let i = 0; i < currentDoW; i++) {\n    days.push(createUnusedDay(\"\"));\n  }\n\n  // fill the array with the given days\n  for (let j = 0; j < dates.length; j++) {\n    days.push(createDayObject(dates[j], goal, currentDoM, j));\n  }\n\n  // pad the end of the array to the next multiple of seven\n  let numToPad = 7 - (days.length % 7);\n\n  // don't add blank weeks\n  if (numToPad === 7) {\n    numToPad = 0;\n  }\n\n  for (let k = 0; k < numToPad; k++) {\n    days.push(createUnusedDay(\"\"));\n  }\n\n  // setup the month toggle flags and years on every day\n  let monthFlag = false;\n  let year = today.getFullYear();\n\n  for (let i = 0, len = days.length; i < len; i++) {\n    // toggle the month flag, only if this is not the first date shown\n    if (i > 0 && days[i].first) {\n      monthFlag = !monthFlag;\n\n      // if the date is 01-01, then increment the year\n      if (days[i].rawDate === \"01-01\") {\n        year++;\n      }\n    }\n\n    days[i].monthFlag = monthFlag;\n    days[i].year = year;\n\n    // make sure only the first occurrence of \"today\" is highlighted\n    days[i].today = days[i].today && !monthFlag;\n  }\n\n  return days;\n}\n\n// Creates a date object using the information in the given date and goal\n//\n// Inputs: date in the format specified in calendar.json\n//         goal: integer goal of finds per day\n//         currentDoM: integer current day of the month\n//         index: the index of the day within the grid (0 = first day)\n//\n// Output: day object in the format:\n//   number: day of the month (first day includes month)\n//   text: findCount of the day\n//   subtext: \"Finds\"\n//   status: 'low' | 'ok' depending on the goal and findCount\n//   today: true for the current day, false otherwise\n//   first: true if the day is the 1st of the month\n//   rawDate: the original date in format MM-DD\nfunction createDayObject(date, goal, currentDoM, index) {\n  const dom = df.getDayOfMonth(date.date);\n\n  let result = {\n    number: dom === 1 ? df.getShortMonthName(date.date) + \" \" + dom : dom,\n    text: date.findCount,\n    subtext: \"Finds\",\n    status: date.findCount < goal ? \"low\" : \"ok\",\n    today: dom === currentDoM,\n    first: dom === 1,\n    rawDate: date.date,\n    index: index,\n  };\n\n  return result;\n}\n\n// returns an usused (aka blank) day\nfunction createUnusedDay(number) {\n  return {\n    number: number,\n    text: \"\",\n    subtext: \"\",\n    status: \"unused\",\n    today: false,\n    first: false,\n    rawDate: \"\",\n    index: -1,\n  };\n}\n\n// Converts the days array into an array of weeks, where each week is an\n// array of 7 days\n//\n// Input: array of day objects\n//\n// Output: array of week objects\n//  week: array of 7 day objects\nfunction convertDaysToWeeks(days) {\n  let weeks = [];\n\n  for (let i = 0, len = days.length; i < len; i += 7) {\n    weeks.push(days.slice(i, i + 7));\n  }\n\n  return weeks;\n}\n\n// Returns an array containing the names of the days as 3-character strings\nexport function getShortDayNames() {\n  return [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n}\n","/** @format */\n\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    borderRadius: \"7px\",\n    backgroundColor: theme.palette.summary.background,\n  },\n  box: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  zeroReq: {\n    color: theme.palette.find.noneReq,\n  },\n  moreThanZero: {\n    color: theme.palette.find.someReq,\n  },\n  summaryFigs: {\n    textAlign: \"center\",\n  },\n  text: {\n    color: theme.palette.summary.text,\n  },\n}));\n\nexport default function SummaryCard(props) {\n  const classes = useStyles();\n  const { generated, goal, next7days } = props.info;\n  return (\n    <>\n      <Card className={classes.root} variant=\"outlined\">\n        <CardContent>\n          <Box className={classes.box}>\n            <div>\n              <Typography className={classes.text}>Updated:</Typography>\n              <Typography className={classes.text}>Goal per day:</Typography>\n              <Typography className={classes.text}>Next 7 days:</Typography>\n            </div>\n            <div className={classes.summaryFigs}>\n              <Typography className={classes.text}>{generated}</Typography>\n              <Typography className={classes.text}>{goal}</Typography>\n              <Typography\n                className={\n                  next7days === 0 ? classes.zeroReq : classes.moreThanZero\n                }>\n                {next7days}\n              </Typography>\n            </div>\n          </Box>\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n","/** @format */\n\nimport React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Header from \"./Header\";\nimport Week from \"./Week\";\nimport { getWeeks, getShortDayNames } from \"./ComposeWeeks\";\nimport SummaryCard from \"./SummaryCard\";\n\nconst useStyles = makeStyles((/*theme*/) => ({\n  g7root: {\n    flexGrow: 1,\n    padding: \"10px\",\n  },\n  summary: {\n    paddingBottom: \"16px\",\n  },\n}));\n\nconst Grid7 = (props) => {\n  const classes = useStyles();\n  const weeks = getWeeks(props.data);\n  const { summary, dayOnClick, holidays } = props;\n\n  let weekNum = 0;\n\n  return (\n    <>\n      <Grid container className={classes.g7root} spacing={0}>\n        <Grid item xs={12} className={classes.summary}>\n          <SummaryCard info={summary} />\n        </Grid>\n        <Header values={getShortDayNames()} />\n        {weeks.map((week) => (\n          <Week\n            values={week}\n            key={weekNum++}\n            dayOnClick={dayOnClick}\n            holidays={holidays}\n          />\n        ))}\n      </Grid>\n    </>\n  );\n};\n\nexport default Grid7;\n","/** @format */\n\nimport React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FindCountHeader from \"./FindCountHeader\";\nimport Grid7 from \"./Grid7\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\n\nconst FindGrid = (props) => {\n  return (\n    <>\n      <Grid container direction=\"column\">\n        <Grid item>\n          <FindCountHeader\n            changeTheme={props.changeTheme}\n            changeDays={props.changeDays}\n            days={props.days}\n            handleWeek={props.handleWeek}\n          />\n        </Grid>\n        <Toolbar />\n        <Grid7\n          data={props.data}\n          summary={props.summary}\n          dayOnClick={props.dayOnClick}\n          holidays={props.holidays}\n        />\n      </Grid>\n    </>\n  );\n};\n\nexport default FindGrid;\n","/** @format */\n\n// implements the to-do list for the next week\n\nimport React from \"react\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport { makeStyles, withTheme } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport * as df from \"./dates\";\n\nfunction NextWeek(props) {\n  const { onClose, open, week } = props;\n  const small = useMediaQuery(props.theme.breakpoints.down(\"sm\"));\n\n  const useStyles = makeStyles((theme) => ({\n    root: {},\n    content: {\n      minWidth: \"300px\",\n      padding: \"10px\",\n      backgroundColor: theme.palette.background.default,\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.day.normBkgnd,\n      padding: \"5px\",\n    },\n    spacer: {\n      height: \"10px\",\n    },\n    gridRoot: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    summary: {\n      padding: \"10px\",\n      color: theme.palette.day.number,\n      backgroundColor: theme.palette.day.normBkgnd,\n    },\n    weekGrid: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"nowrap\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n    },\n    dayCell: {},\n    dayText: {\n      padding: \"5px\",\n      color: theme.palette.day.number,\n    },\n    findText: {\n      paddingBottom: \"7px\",\n      textAlign: \"center\",\n      color: theme.palette.find.someReq,\n    },\n    findZero: {\n      color: \"transparent\",\n    },\n    dayPaper: {\n      backgroundColor: theme.palette.day.normBkgnd,\n    },\n  }));\n\n  const classes = useStyles();\n\n  const handleClose = () => {\n    onClose(\"\");\n  };\n\n  const getSummaryInfo = () => {\n    // loop over the days and generate the summary info\n    let finds = 0;\n    let days = 0;\n\n    for (let i = 0; i < week.dates.length; i++) {\n      const day = week.dates[i];\n\n      if (day.findCount < week.goal) {\n        days++;\n        finds += week.goal - day.findCount;\n      }\n    }\n\n    return (\n      <Paper className={classes.summary}>\n        <Typography>Daily Goal: {week.goal}</Typography>\n        <Typography>Total Finds Needed This Week: {finds}</Typography>\n        <Typography>Days Needing Finds: {days}</Typography>\n      </Paper>\n    );\n  };\n\n  /* Structure of week\n      dates: Array(7)\n      0: {date: \"01-03\", findCount: 2, dayname: \"Sunday\"}\n      1: {date: \"01-04\", findCount: 7, dayname: \"Monday\"}\n      2: {date: \"01-05\", findCount: 2, dayname: \"Tuesday\"}\n      3: {date: \"01-06\", findCount: 8, dayname: \"Wednesday\"}\n      4: {date: \"01-07\", findCount: 2, dayname: \"Thursday\"}\n      5: {date: \"01-08\", findCount: 1, dayname: \"Friday\"}\n      6: {date: \"01-09\", findCount: 2, dayname: \"Saturday\"}\n      length: 7\n      __proto__: Array(0)\n      goal: 4\n      number: 7\n      startDate: \"01-03\"\n      status: \"ok\"\n  */\n\n  const getNumToFind = (finds) => {\n    if (finds < week.goal) {\n      return week.goal - finds;\n    } else {\n      return 0;\n    }\n  };\n\n  const getDayHeader = (day) => {\n    const width = small ? 2 : 3;\n    const dayName = day.dayname.slice(0, width);\n    const dayNum = df.getDayOfMonth(day.date);\n\n    return `${dayNum} ${dayName}`;\n  };\n\n  const getDayCell = (day) => {\n    const numToFind = getNumToFind(day.findCount);\n\n    let findStyles = `${classes.findText}`;\n    if (numToFind === 0) {\n      findStyles = `${classes.findText} ${classes.findZero}`;\n    }\n\n    return (\n      <Grid item className={classes.dayCell} key={day.date}>\n        <Paper className={classes.dayPaper}>\n          <Typography\n            className={classes.dayText}\n            variant={\"overline\"}\n            noWrap={true}>\n            {getDayHeader(day)}\n          </Typography>\n          <Typography className={findStyles} variant=\"h5\">\n            {numToFind}\n          </Typography>\n        </Paper>\n      </Grid>\n    );\n  };\n\n  const getWeek = () => {\n    return (\n      <Grid container item className={classes.weekGrid} spacing={1} xs={12}>\n        {week.dates.map((day) => getDayCell(day))}\n      </Grid>\n    );\n  };\n\n  return (\n    <>\n      <Dialog onClose={handleClose} open={open} className={classes.root}>\n        <div className={classes.content}>\n          <DialogTitle id=\"nextweek\">\n            Number To Find This Week\n            <IconButton className={classes.closeButton} onClick={handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <Grid container className={classes.gridRoot}>\n            {getWeek()}\n            <div className={classes.spacer} />\n            {getSummaryInfo()}\n          </Grid>\n        </div>\n      </Dialog>\n    </>\n  );\n}\n\nexport default withTheme(NextWeek);\n","/** @format */\n\n// implements a hook to set the theme and indicate when it is loaded\n// at startup.\n//\n// Based on code from:\n// https://css-tricks.com/a-dark-mode-toggle-with-react-and-themeprovider/\n\nimport { useEffect, useState } from \"react\";\nimport { Themes } from \"./Themes\";\n\nexport const useCustomTheme = (defaultTheme) => {\n  const [theme, setInternalTheme] = useState(defaultTheme);\n  const [componentMounted, setComponentMounted] = useState(false);\n\n  const setCustomTheme = (customTheme) => {\n    // store just the name of the theme\n    window.localStorage.setItem(\"theme\", customTheme.palette.name);\n    setInternalTheme(customTheme);\n  };\n\n  // expects th is a theme\n  const setTheme = (th) => {\n    setCustomTheme(th);\n  };\n\n  useEffect(() => {\n    // get the name of the theme\n    const localThemeName = window.localStorage.getItem(\"theme\");\n\n    if (localThemeName) {\n      setInternalTheme(Themes[localThemeName]);\n    }\n    setComponentMounted(true);\n  }, []);\n\n  return [theme, setTheme, componentMounted];\n};\n","/** @format */\n\n// version number\n\nconst majorVersion = \"1\";\nconst minorVersion = \"4\";\nconst fixVersion = \"0\";\nconst addlVersion = \"\";\n\nexport const version = `${majorVersion}.${minorVersion}.${fixVersion}${addlVersion}`;\n","/** @format */\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport axios from \"axios\";\nimport \"fontsource-roboto\";\nimport React, { useEffect, useState } from \"react\";\nimport { getCurrentWeek } from \"./dates\";\nimport DayDetail from \"./DayDetail\";\nimport { useDays } from \"./Days\";\nimport FindGrid from \"./FindGrid\";\nimport { getFindCountData } from \"./GetData\";\nimport NextWeek from \"./NextWeek\";\nimport {\n  getConfigURL,\n  getFindsURL,\n  getHolidaysURL,\n  getServerVersionURL,\n} from \"./Server\";\nimport { Themes } from \"./Themes\";\nimport { useCustomTheme } from \"./useCustomTheme\";\nimport { version } from \"./Version\";\n\nconst App = () => {\n  const [theme, setTheme, componentMounted] = useCustomTheme(Themes.Green);\n  const defaultDays = 21;\n\n  const [days, setDays] = useDays(defaultDays);\n  const [open, setOpen] = useState(false);\n  const [selectedValue, setSelectedValue] = useState(\"\");\n\n  const [toDoOpen, setToDoOpen] = useState(false);\n  const [toDoWeek, setToDoWeek] = useState({ dates: [], goal: 0, number: 0 });\n\n  const [clickedDate, setClickedDate] = useState(\"\");\n  const [position, setPosition] = useState({\n    status: \"fail\",\n    latitude: 0,\n    longitude: 0,\n  });\n\n  const [allData, setAllData] = useState({});\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [holidays, setHolidays] = useState({});\n  const [serverVersion, setServerVersion] = useState({ version: \"0.0.0\" });\n  const [config, setConfig] = useState({\n    pq_time: \"\",\n    update_time: \"\",\n    goal: 4,\n  });\n\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition((pos) => {\n        setPosition({\n          status: \"ok\",\n          latitude: pos.coords.latitude,\n          longitude: pos.coords.longitude,\n        });\n      });\n    }\n\n    // get the find data\n    axios.get(getFindsURL()).then((res) => {\n      setAllData(res.data);\n      setDataLoaded(true);\n    });\n\n    // get the holidays\n    axios.get(getHolidaysURL()).then((res) => {\n      setHolidays(res.data);\n    });\n\n    // get the server version\n    axios.get(getServerVersionURL()).then((res) => {\n      setServerVersion(res.data);\n    });\n\n    // get the configuration information\n    axios.get(getConfigURL()).then((res) => {\n      setConfig(res.data);\n      console.log(res.data);\n    });\n  }, []);\n\n  const changeTheme = (event) => {\n    setTheme(event.target.value);\n  };\n\n  const changeDays = (event) => {\n    setDays(event.target.value);\n  };\n\n  const dayOnClick = (cell) => {\n    if (cell.day !== \"\") {\n      setClickedDate(cell);\n      setOpen(true);\n    }\n  };\n\n  const dayDlgClose = (value) => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n\n  const handleWeek = () => {\n    const week = getCurrentWeek(allData);\n    // console.log(week);\n\n    setToDoWeek(week);\n    setToDoOpen(true);\n  };\n\n  const toDoDlgClose = (value) => {\n    setToDoOpen(false);\n  };\n\n  if (!componentMounted || !dataLoaded) {\n    return <div />;\n  }\n\n  const fcd = getFindCountData(days, allData);\n  const summary = {\n    generated: new Date(config.pq_time).toLocaleString(),\n    goal: config.goal,\n    next7days: fcd.summary.next7days,\n  };\n\n  return (\n    <>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <FindGrid\n          data={fcd.data}\n          summary={summary}\n          changeTheme={changeTheme}\n          changeDays={changeDays}\n          dayOnClick={dayOnClick}\n          days={days}\n          handleWeek={handleWeek}\n          holidays={holidays}\n        />\n        <Typography\n          align=\"right\"\n          variant=\"subtitle2\"\n          style={{ paddingRight: \"10px\" }}>\n          {version}/{serverVersion.version}\n        </Typography>\n        <DayDetail\n          selectedValue={selectedValue}\n          open={open}\n          cell={clickedDate}\n          onClose={dayDlgClose}\n          position={position}\n          allData={allData}\n        />\n\n        <NextWeek week={toDoWeek} open={toDoOpen} onClose={toDoDlgClose} />\n      </MuiThemeProvider>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}